// Generated by CoffeeScript 1.6.2
(function() {
  var Snake;

  Snake = (function() {
    function Snake(position, color, name) {
      var i, num, pos, rad, radius, springConst, springFriction, springLen, _i, _j, _ref, _ref1;

      this.name = name;
      this.dir = new Vec2(-1, 0);
      this.move = false;
      this.left = false;
      this.right = false;
      this.iterations = 0;
      num = 10;
      radius = 8;
      springConst = 0.0004;
      springLen = 3;
      springFriction = 0.00005;
      this.particles = new Array();
      this.springs = new Array();
      pos = new Vec2(position.x, position.y);
      for (i = _i = 0, _ref = num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        rad = radius * (1 - i / num);
        pos = pos.plus(new Vec2(springLen, 0));
        this.particles.push(new Particle(pos, rad, color, new Vec2(0, 0)));
      }
      this.particles[0].head = true;
      this.head = this.particles[0];
      for (i = _j = 0, _ref1 = num - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        this.springs.push(new Spring(this.particles[i], this.particles[i + 1], springConst, springLen, springFriction));
      }
    }

    Snake.prototype.render = function(blending) {
      var i, pos, _i, _ref;

      for (i = _i = _ref = this.particles.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        this.particles[i].render(blending);
      }
      ctx.font = "15px Arial";
      ctx.fillStyle = "#fff";
      ctx.opa;
      pos = this.particles[0].currPos.plus(new Vec2(this.name.split("").length * -3, -20));
      return ctx.fillText(this.name, pos.x, pos.y);
    };

    Snake.prototype.update = function(dt) {
      var particle, spring, _i, _j, _len, _len1, _ref, _ref1, _results;

      _ref = this.springs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spring = _ref[_i];
        spring.solve();
      }
      if (!this.move) {
        this.dir = this.particles[0].currPos.minus(this.particles[2].currPos).unit();
      }
      if (this.right && this.move) {
        this.dir.rotate(Maths.toRadians(-0.5));
      }
      if (this.left && this.move) {
        this.dir.rotate(Maths.toRadians(0.5));
      }
      if (this.move) {
        this.dir.rotate(Maths.toRadians(Math.sin(this.iterations += 0.04)));
      }
      if (this.move) {
        this.particles[0].vel.add(this.dir.times_s(0.005));
      }
      _ref1 = this.particles;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        particle = _ref1[_j];
        _results.push(particle.update(dt));
      }
      return _results;
    };

    return Snake;

  })();

  window.Snake = Snake;

}).call(this);
