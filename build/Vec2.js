// Generated by CoffeeScript 1.6.1
(function() {

  MC.Vec2 = (function() {

    function Vec2(x, y) {
      this.x = x;
      this.y = y;
      this.restAngle = 0;
    }

    Vec2.vecClosestToDir = function(dir, vecs) {
      var closest, vec, _i, _len;
      closest = vecs[0];
      for (_i = 0, _len = vecs.length; _i < _len; _i++) {
        vec = vecs[_i];
        if (dir.dot(vec.unit()) > dir.dot(closest.unit())) {
          closest = vec;
        }
      }
      return closest;
    };

    Vec2.vecFurthestFromDir = function(dir, vecs) {
      var closest, vec, _i, _len;
      closest = vecs[0];
      for (_i = 0, _len = vecs.length; _i < _len; _i++) {
        vec = vecs[_i];
        if (dir.dot(vec.unit()) < dir.dot(closest.unit())) {
          closest = vec;
        }
      }
      return closest;
    };

    Vec2.angLessThan = function(angle, vec1, vec2) {
      return vec1.unit().dot(vec2.unit()) < Math.cos(angle);
    };

    Vec2.prototype.sqrdLength = function() {
      return this.x * this.x + this.y * this.y;
    };

    Vec2.prototype.length = function() {
      return Math.sqrt(this.sqrdLength());
    };

    Vec2.prototype.sqrdDistTo = function(vec) {
      return this.minus(vec).sqrdLength();
    };

    Vec2.prototype.distTo = function(vec) {
      return Math.sqrt(this.sqrdDistTo(vec));
    };

    Vec2.prototype.sqrt = function() {
      return new Vec2(Math.sqrt(this.x), Math.sqrt(this.y));
    };

    Vec2.prototype.sqrd = function() {
      return new Vec2(this.x * this.x, this.y * this.y);
    };

    Vec2.prototype.unit = function() {
      var len;
      len = this.length();
      return new Vec2(this.x / len, this.y / len);
    };

    Vec2.prototype.normalize = function() {
      var len;
      len = this.length();
      this.x /= len;
      return this.y /= len;
    };

    Vec2.prototype.copy = function() {
      return new Vec2(this.x, this.y);
    };

    Vec2.prototype.set = function(x, y) {
      this.x = x;
      return this.y = y;
    };

    Vec2.prototype.equals = function(vec) {
      return this.x === vec.x && this.y === vec.y;
    };

    Vec2.prototype.add = function(vec) {
      this.x += vec.x;
      return this.y += vec.y;
    };

    Vec2.prototype.plus = function(vec) {
      return new Vec2(this.x + vec.x, this.y + vec.y);
    };

    Vec2.prototype.subtract = function(vec) {
      this.x -= vec.x;
      return this.y -= vec.y;
    };

    Vec2.prototype.minus = function(vec) {
      return new Vec2(this.x - vec.x, this.y - vec.y);
    };

    Vec2.prototype.times_v = function(vec) {
      return new Vec2(this.x * vec.x, this.y * vec.y);
    };

    Vec2.prototype.times_s = function(scalar) {
      return new Vec2(this.x * scalar, this.y * scalar);
    };

    Vec2.prototype.multiply_v = function(vec) {
      this.x *= vec.x;
      return this.y *= vec.y;
    };

    Vec2.prototype.multiply_s = function(scalar) {
      this.x *= scalar;
      return this.y *= scalar;
    };

    Vec2.prototype.divide_v = function(vec) {
      this.x /= vec.x;
      return this.y /= vec.y;
    };

    Vec2.prototype.divide_s = function(scalar) {
      this.x /= scalar;
      return this.y /= scalar;
    };

    Vec2.prototype.dividedWith_v = function(vec) {
      return new Vec2(this.x / vec.x, this.y / vec.y);
    };

    Vec2.prototype.dividedWith_s = function(scalar) {
      return new Vec2(this.x / scalar, this.y / scalar);
    };

    Vec2.prototype.dot = function(vec) {
      return this.x * vec.x + this.y * vec.y;
    };

    Vec2.prototype.cross = function(vec) {
      return this.x * vec.y - this.y * vec.x;
    };

    Vec2.prototype.projectedOnto = function(vec) {
      var dir;
      dir = vec.unit();
      return dir.times_s(this.dot(dir));
    };

    Vec2.prototype.perpCCW = function() {
      return new Vec2(-this.y, this.x);
    };

    Vec2.prototype.perpCW = function() {
      return new Vec2(this.y, -this.x);
    };

    Vec2.prototype.midpoint = function(vec, mp) {
      return this.times_s(1 - mp).plus(vec.times_s(mp));
    };

    Vec2.prototype.angle = function() {
      return Math.atan2(this.y, this.x);
    };

    Vec2.prototype.rotated = function(tiltAngle) {
      var angle, len;
      angle = this.angle();
      angle -= tiltAngle;
      len = this.length();
      return new Vec2(len * Math.cos(angle), len * Math.sin(angle));
    };

    Vec2.prototype.rotate = function(tiltAngle) {
      var angle, len;
      this.restAngle += tiltAngle;
      angle = this.angle();
      angle -= tiltAngle;
      len = this.length();
      this.x = len * Math.cos(angle);
      return this.y = len * Math.sin(angle);
    };

    Vec2.prototype.restoreRotation = function() {
      var angle, len;
      angle = this.angle();
      len = this.length();
      angle += this.restAngle;
      this.x = len * Math.cos(angle);
      this.y = len * Math.sin(angle);
      return this.restAngle = 0;
    };

    return Vec2;

  })();

  window.Vec2 = Vec2;

}).call(this);
