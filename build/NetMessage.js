// Generated by CoffeeScript 1.6.1

/*
Valid messages:

authreq = {
  type: Message.CODES.AUTH_REQ,
  SESSID: string
}

authres = {
  type: Message.CODES.AUTH_RES,
  value: boolean,
  (response): {
    (reason): string
  }
}

authextres = {
  type: Message.CODES.AUTH_EXTERNAL_RES,
  value: boolean,
  (response): {
    (reason): string
  }
}

msgsendreq = {
  type: Message.CODES.MSG_SEND_REQ,
  message: {
  timeStamp: number,
  touID: string,
  fromuID: string,
  (content): string,
  (id): number
  }
}

msgsendres = {
  type: Message.CODES.MSG_SEND_RES,
  response: {
    value: boolean,
    id: string
  }
}

msg = {
  type: Message.CODES.MSG,
  message: {
  timeStamp: number,
  touID: string,
  fromuID: string,
  (content): string,
  (id): number
  }
}

userreq = {
  type: Message.CODES.USER_REQ,
  uID: string
}
*/


(function() {
  var NetMessage;

  NetMessage = (function() {
    var assertMessage, assertResponse,
      _this = this;

    function NetMessage() {}

    NetMessage.CODES = {
      AUTH_REQ: 0,
      AUTH_RES: 1,
      AUTH_EXTERNAL_RES: 2,
      MSG_SEND_REQ: 3,
      MSG_SEND_RES: 4,
      MSG: 5,
      USER_REQ: 6
    };

    assertResponse = function(response) {
      if ((response != null ? response.value : void 0) != null) {
        if (typeof (response != null ? response.value : void 0) !== "boolean") {
          return false;
        }
      }
      if ((response != null ? response.reason : void 0) != null) {
        if (typeof (response != null ? response.reason : void 0) !== "string") {
          return false;
        }
      }
      if ((response != null ? response.id : void 0) != null) {
        if (typeof (response != null ? response.id : void 0) !== "number") {
          return false;
        }
      }
      return true;
    };

    assertMessage = function(message) {
      if ((message != null ? message.timeStamp : void 0) != null) {
        if (typeof message.timeStamp !== "number") {
          return false;
        }
      } else {
        return false;
      }
      if ((message != null ? message.content : void 0) != null) {
        if (typeof message.content !== "string") {
          return false;
        }
      } else {
        return false;
      }
      if ((message != null ? message.touID : void 0) != null) {
        if (typeof message.touID !== "string") {
          return false;
        }
      } else {
        return false;
      }
      if ((message != null ? message.fromuID : void 0) != null) {
        if (typeof message.fromuID !== "string") {
          return false;
        }
      }
      if ((message != null ? message.id : void 0) != null) {
        if (typeof message.id !== "number") {
          return false;
        }
      }
      return true;
    };

    NetMessage.ASSERT_TYPE = {};

    NetMessage.ASSERT_TYPE[NetMessage.CODES.AUTH_REQ] = function(req) {
      return req.type === NetMessage.CODES.AUTH_REQ && typeof (req != null ? req.SESSID : void 0) === "string";
    };

    NetMessage.ASSERT_TYPE[NetMessage.CODES.AUTH_RES] = function(res) {
      return res.type === NetMessage.CODES.AUTH_RES && (assertResponse(res.response) || (res.response == null));
    };

    NetMessage.ASSERT_TYPE[NetMessage.CODES.AUTH_EXTERNAL_RES] = function(res) {
      return typeof (res != null ? res.loggedin : void 0) === "boolean" && typeof (res != null ? res.uID : void 0) === "string";
    };

    NetMessage.ASSERT_TYPE[NetMessage.CODES.MSG_SEND_REQ] = function(req) {
      return req.type === NetMessage.CODES.MSG_SEND_REQ && assertMessage(req.message);
    };

    NetMessage.ASSERT_TYPE[NetMessage.CODES.MSG_SEND_RES] = function(res) {
      return res.type === NetMessage.CODES.MSG_SEND_RES && (assertResponse(res.response) || (res.response == null));
    };

    NetMessage.ASSERT_TYPE[NetMessage.CODES.MSG] = function(msg) {
      return msg.type === NetMessage.CODES.MSG && assertMessage(msg.message);
    };

    NetMessage.ASSERT_TYPE[NetMessage.CODES.USER_REQ] = function(req) {
      return req.type === NetMessage.CODES.USER_REQ && typeof (req != null ? req.uID : void 0) === "string";
    };

    NetMessage.serialize = function(messageObject) {
      return JSON.stringify(messageObject);
    };

    NetMessage.deserialize = function(message) {
      return JSON.parse(message);
    };

    NetMessage.createAuthReq = function(sessid) {
      return {
        type: this.CODES.AUTH_REQ,
        SESSID: sessid
      };
    };

    NetMessage.createAuthRes = function(value, extra) {
      var key, res, val;
      res = {
        type: this.CODES.AUTH_RES,
        response: {
          value: value
        }
      };
      for (key in extra) {
        val = extra[key];
        res.response[key] = val;
      }
      return res;
    };

    NetMessage.createMsgSendReq = function(message) {
      return {
        type: this.CODES.MSG_SEND_REQ,
        message: message
      };
    };

    NetMessage.createMsgSendRes = function(value, extra) {
      var key, res, val;
      res = {
        type: this.CODES.MSG_SEND_RES,
        response: {
          value: value
        }
      };
      for (key in extra) {
        val = extra[key];
        res.response[key] = val;
      }
      return res;
    };

    NetMessage.createMsg = function(msg) {
      return {
        type: this.CODES.MSG,
        message: msg
      };
    };

    NetMessage.createUserReq = function(uID) {
      return {
        type: this.CODES.USER_REQ,
        uID: uID
      };
    };

    NetMessage.assert = function(obj, type) {
      return type === this.typeOf(obj);
    };

    NetMessage.typeOf = function(obj) {
      var assert, type, _ref;
      _ref = this.ASSERT_TYPE;
      for (type in _ref) {
        assert = _ref[type];
        if (assert(obj)) {
          return Number(type);
        }
      }
    };

    return NetMessage;

  }).call(this);

  if (typeof window === "undefined" || window === null) {
    module.exports = exports;
    exports.Message = Message;
  } else {
    window.Message = Message;
  }

}).call(this);
