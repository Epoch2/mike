// Generated by CoffeeScript 1.6.2
(function() {
  var GameClientConnection, MS, NetServer, WebSocketServer, fs, http, https, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebSocketServer = require("ws").Server;

  fs = require("fs");

  https = require("https");

  http = require("http");

  request = require("request");

  MS = require("./message.js").Message;

  GameClientConnection = (function() {
    function GameClientConnection(ws, callback) {
      var _this = this;

      this.ws = ws;
      this.callback = callback;
      this.ID = void 0;
      this.authenticated = false;
      this.callbacks = {
        "message": void 0,
        "close": void 0
      };
      this.ws.on("message", function(message) {
        return _this.emit("message", message);
      });
      this.ws.on("close", function(code, reason) {
        return _this.emit("close");
      });
    }

    GameClientConnection.prototype.emit = function(event, arg) {
      var callback, evt, _ref, _results;

      _ref = this.callbacks;
      _results = [];
      for (evt in _ref) {
        callback = _ref[evt];
        if (evt === event && typeof callback === "function") {
          _results.push(callback(arg));
        }
      }
      return _results;
    };

    GameClientConnection.prototype.on = function(event, callback) {
      var _this = this;

      if (typeof event === "string" && typeof callback === "function") {
        return (function() {
          return _this.callbacks[event] = callback;
        })();
      }
    };

    GameClientConnection.prototype.transmit = function(msgObject) {
      var error;

      try {
        this.ws.send(MS.serialize(msgObject));
        return null;
      } catch (_error) {
        error = _error;
        return error;
      }
    };

    return GameClientConnection;

  })();

  NetServer = (function() {
    function NetServer(config) {
      var server,
        _this = this;

      this.config = config;
      this.authenticateUser = __bind(this.authenticateUser, this);
      this.handleClientRequest = __bind(this.handleClientRequest, this);
      this.addIDTo = __bind(this.addIDTo, this);
      server = this.config.https === true ? https.createServer(config) : http.createServer();
      server.listen(this.config.port || 1337);
      this.wss = new WebSocketServer({
        server: server
      });
      this.clients = [];
      this.clientID = 0;
      this.callbacks = {
        "connect": void 0,
        "close": void 0
      };
      this.wss.on("connection", function(ws) {
        var client;

        client = new GameClientConnection(ws);
        client.on("message", function(message) {
          return _this.handleClientRequest(client, MS.deserialize(message));
        });
        return client.on("close", function() {
          var connectedClient;

          connectedClient = _this.getClientByWS(client.ws);
          if (connectedClient != null) {
            return _this.delClientByWS(client.ws);
          }
        });
      });
    }

    NetServer.prototype.emit = function(event, arg) {
      var callback, evt, _ref, _results;

      _ref = this.callbacks;
      _results = [];
      for (evt in _ref) {
        callback = _ref[evt];
        if (evt === event && typeof callback === "function") {
          _results.push(callback(arg));
        }
      }
      return _results;
    };

    NetServer.prototype.on = function(event, callback) {
      var _this = this;

      if (typeof event === "string" && typeof callback === "function") {
        return (function() {
          return _this.callbacks[event] = callback;
        })();
      }
    };

    NetServer.prototype.addIDTo = function(client) {
      client.ID = this.clientID;
      return this.clientID++;
    };

    NetServer.prototype.handleClientRequest = function(client, request) {
      return console.log("lol");
    };

    NetServer.prototype.authenticateUser = function(client) {
      this.addClient(this.addIDTo(client));
      this.emit("client connect", client.ID);
      return true;
    };

    NetServer.prototype.addClient = function(client) {
      if ((client.ws != null) && (client.ID != null)) {
        return this.clients.push(client);
      }
    };

    NetServer.prototype.delClientByWS = function(ws) {
      var client, i, _i, _len, _ref, _results;

      _ref = this.clients;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        client = _ref[i];
        if ((client != null ? client.ws : void 0) === ws) {
          _results.push(this.clients.splice(i, 1));
        }
      }
      return _results;
    };

    NetServer.prototype.getClientByID = function(ID) {
      var client, _i, _len, _ref;

      _ref = this.clients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if ((client != null ? client.ID : void 0) === ID) {
          return client;
        }
      }
      return null;
    };

    NetServer.prototype.getClientByWS = function(ws) {
      var client, _i, _len, _ref;

      _ref = this.clients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if ((client != null ? client.ws : void 0) === ws) {
          return client;
        }
      }
      return null;
    };

    NetServer.prototype.getClientCount = function() {
      return this.clients.length;
    };

    return NetServer;

  })();

}).call(this);
