// Generated by CoffeeScript 1.6.1
(function() {

  MC.Keyboard = (function() {
    var self;

    function Keyboard() {}

    self = Keyboard;

    Keyboard.keyDownEvents = new Array();

    Keyboard.keyUpEvents = new Array();

    (function() {
      var onKeyDown, onKeyUp;
      onKeyDown = function(event) {
        var downEvent, _i, _len, _ref, _results;
        _ref = self.keyDownEvents;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          downEvent = _ref[_i];
          if (downEvent.key === event.keyCode && downEvent.triggered === !true) {
            downEvent.triggered = true;
            _results.push(downEvent.callback());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      onKeyUp = function(event) {
        var downEvent, upEvent, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = self.keyDownEvents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          downEvent = _ref[_i];
          if (downEvent.key === event.keyCode) {
            downEvent.triggered = false;
          }
        }
        _ref1 = self.keyUpEvents;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          upEvent = _ref1[_j];
          if (upEvent.key === event.keyCode) {
            _results.push(upEvent.callback());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      document.addEventListener("keydown", onKeyDown, false);
      return document.addEventListener("keyup", onKeyUp, false);
    })();

    return Keyboard;

  })();

  ({
    this.bind: function(action, boundEvent) {
      var doNotBind, downEvent, upEvent, _i, _j, _len, _len1, _ref, _ref1;
      if (action === "press") {
        _ref = this.keyDownEvents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          downEvent = _ref[_i];
          if (downEvent.key === boundEvent.key && downEvent.callback === boundEvent.callback) {
            console.warn("The same key down event cannot be bound twice -> \nkey: " + boundEvent.key + "\ncallback: " + boundEvent.callback);
            doNotBind = true;
            break;
          }
        }
        if (!doNotBind) {
          return this.keyDownEvents.push(boundEvent);
        }
      } else if (action === "release") {
        _ref1 = this.keyUpEvents;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          upEvent = _ref1[_j];
          if (upEvent.key === boundEvent.key && upEvent.callback === boundEvent.callback) {
            console.warn("The same key up event cannot be bound twice -> \nkey: " + boundEvent.key + "\ncallback: " + boundEvent.callback);
            doNotBind = true;
            break;
          }
        }
        if (!doNotBind) {
          return this.keyUpEvents.push(boundEvent);
        }
      }
    },
    this.unbind: function(action, boundEvent) {
      var downEvent, i, upEvent, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
      if (action === "press") {
        _ref = this.keyDownEvents;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          downEvent = _ref[i];
          if (boundEvent.key === downEvent.key && boundEvent.callback === downEvent.callback) {
            this.keyDownEvents.splice(i, 1);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else if (action === "release") {
        _ref1 = this.keyUpEvents;
        _results1 = [];
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          upEvent = _ref1[i];
          if (boundEvent.key === upEvent.key && boundEvent.callback === upEvent.callback) {
            this.keyUpEvents.splice(i, 1);
            break;
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }
    }
  });

}).call(this);
